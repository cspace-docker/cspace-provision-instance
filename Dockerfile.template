#
# cspace-instance Dockerfile
#
# Dockerfile 3 of 3 to install and configure a CollectionSpace
# server instance inside a Docker container.
#
# This Dockerfile is specific to and requires Ubuntu Linux,
# although most of its instructions should likely work with
# any recent Debian-based Linux distribution.
#

#
# Start from the Docker image built by running the
# 'cspace-version' Dockerfile.
#
FROM collectionspace/cspace-version
MAINTAINER Richard Millet "richard.millet@berkeley.edu"

# The following values will be replaced by a text preprocessor
# (currently 'sed'), which will retrieve them from a per-instance
# configuration file, cspace-instance-values.sed:
ENV DB_CSADMIN_PASSWORD ${DB_CSADMIN_PASSWORD}
ENV DB_CSPACE_PASSWORD ${DB_CSPACE_PASSWORD}
ENV DB_NUXEO_PASSWORD ${DB_NUXEO_PASSWORD}
ENV DB_READER_PASSWORD ${DB_READER_PASSWORD}
ENV DB_HOST ${DB_HOST}
ENV DB_PORT ${DB_PORT}
ENV CSPACE_INSTANCE_ID ${CSPACE_INSTANCE_ID}

#
# Set the instance ID of this CollectionSpace server instance,
# and the host and port of the PostgreSQL database server
# to which this CollectionSpace server will be connecting.
#
# This is done by editing three values in a Services layer
# properties file, which is then referenced during the
# CollectionSpace build process.
#
# Note: the following 'sed' expressions require double quoting,
# so that values can be interpolated from environment variables.
#
RUN sed --expression="s/^db.host=.*/db.host=$DB_HOST/" --in-place=bak \
  $USER_HOME/$CSPACE_USERNAME/src/services/build.properties
RUN sed --expression="s/^db.port=.*/db.port=$DB_PORT/" --in-place=bak \
  $USER_HOME/$CSPACE_USERNAME/src/services/build.properties
RUN sed --expression="s/^cspace.instance.id=.*/cspace.instance.id=$CSPACE_INSTANCE_ID/" --in-place=bak \
  $USER_HOME/$CSPACE_USERNAME/src/services/build.properties

#
# Perform a full source code build and deployment.
#
# NOTE: We must build the Application layer first since it creates the
# configuration tool needed to create the Service layer's configuration
# artifacts; i.e items such as the Nuxeo plugins and service bindings.
#
RUN cd $USER_HOME/$CSPACE_USERNAME/src/application && mvn clean install -DskipTests
RUN cd $USER_HOME/$CSPACE_USERNAME/src/services && mvn clean install -DskipTests
RUN cd $USER_HOME/$CSPACE_USERNAME/src/ui && mvn clean install -DskipTests

#
# Deploy configuration artifacts, create and initialize the databases,
# and populate the AuthN/AuthZ tables.
#
RUN cd $USER_HOME/$CSPACE_USERNAME/src/services && ant undeploy deploy
#
# The following command, to run successfully, MUST have access to
# a running PostgreSQL server, at the host and port specified in
# DB_HOST and DB_PORT respectively.
#
RUN cd $USER_HOME/$CSPACE_USERNAME/src/services && ant create_db import

#
# Finally set up any containers run from this image to listen on port 8180,
# CollectionSpace's default HTTP port.
#
# When a container is run from this image, see the following instructions
# to configure how the Docker host, other hosts, and other containers can
# talk to the process(es) running inside the container at that port:
# http://docs.docker.com/userguide/dockerlinks/#network-port-mapping-refresher)
#
EXPOSE 8180
